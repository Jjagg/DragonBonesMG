<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DragonBonesMG</name>
    </assembly>
    <members>
        <member name="T:DragonBonesMG.Animation.BoneTimeline">
            <summary>
            A BoneTimeline holds the transform keyframes for a single bone.
            <see cref="P:DragonBonesMG.Animation.BoneTimeline.Tween"/> holds the current transform of the bone this is the timeline of.
            </summary>
        </member>
        <member name="T:DragonBonesMG.Animation.DbAnimationState">
            <summary>
            A specific moment within an <see cref="T:DragonBonesMG.Animation.DbAnimation"/>. 
            This data class holds all transforms for that moment in the animation.
            </summary>
        </member>
        <member name="T:DragonBonesMG.Animation.DbAnimation">
            <summary>
            DragonBones animations consist of 4 timelines (for now). A <see cref="T:DragonBonesMG.Animation.TransformTimeline"/>,
            a <see cref="T:DragonBonesMG.Animation.DisplayTimeline"/>, an <see cref="T:DragonBonesMG.Animation.FFDTimeline"/> and an EventTimeline (as an array of <see cref="F:DragonBonesMG.Animation.DbAnimation.EventFrames"/>).
            An armatures <see cref="T:DragonBonesMG.Animation.IAnimatable"/> methods will delegate to a DbAnimation (if one is active). 
            <see cref="M:DragonBonesMG.Animation.DbAnimation.Update(System.TimeSpan)"/> will update all timelines. 
            <see cref="M:DragonBonesMG.Animation.DbAnimation.GetCurrentState"/> returns a snapshot of current timeline states (except for events, those are triggered
            automatically when a keyframe is passed).
            </summary>
        </member>
        <member name="M:DragonBonesMG.Animation.DbAnimation.Play(System.Boolean)">
            <summary>
            Play this animation.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Animation.DbAnimation.Pause">
            <summary>
            Pause this animation.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Animation.DbAnimation.SetTime(System.Single)">
            <summary>
            Set the animation time. Used instead of <see cref="M:DragonBonesMG.Animation.DbAnimation.PassTime(System.Single)"/> when no events should be triggered.
            </summary>
            <param name="time"></param>
        </member>
        <member name="M:DragonBonesMG.Animation.DbAnimation.GetCurrentState">
            <summary>
            Calculate a snapshot of the animation at this instant and return it.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Animation.DbAnimation.TriggerEvents(System.Single,System.Single)">
            <summary>
            Trigger events between a start and end frame.
            </summary>
            <param name="start"></param>
            <param name="end"></param>
        </member>
        <member name="T:DragonBonesMG.Animation.DisplayTimeline">
            <summary>
            Holds a collection of slot timelines.
            <seealso cref="T:DragonBonesMG.Animation.SlotTimeline"/>
            </summary>
        </member>
        <member name="F:DragonBonesMG.Animation.MeshTimeline.Offset">
            <summary>
            Offset of the vertices in this timeline
            </summary>
        </member>
        <member name="T:DragonBonesMG.Animation.SingleTimeline">
            <summary>
            Represents a timeline for a single object. (Mesh, Bone or Slot)
            </summary>
        </member>
        <member name="P:DragonBonesMG.Animation.SingleTimeline.Frames">
            <summary>
            Note that array is covariant, but should not be. The runtime type of this arrays contents is not Frame.
            </summary>
        </member>
        <member name="T:DragonBonesMG.Animation.TransformTimeline">
            <summary>
            A TransformTimeline holds a collection of BoneTimelines. />.
            <seealso cref="T:DragonBonesMG.Animation.BoneTimeline"/>
            </summary>
        </member>
        <member name="M:DragonBonesMG.Animation.TransformTimeline.#ctor(DragonBonesMG.JsonData.BoneTimelineData[])">
            <summary>
            Create a new TransformTimeline given the data for all bone timelines.
            </summary>
            <param name="datas"></param>
        </member>
        <member name="T:DragonBonesMG.Core.DbArmature">
            <summary>
            This is the main DragonBones entity. Armatures have a collection of bones and slots that determine
            what an armature looks like and how it is transformed. It also has a collection of animations that
            can be played through the <see cref="T:DragonBonesMG.Animation.IAnimatable"/> interface. When using DragonBones in a game,
            use an entities armature like you would use its sprite or animationplayer with other animating techniques.
            <seealso cref="T:DragonBonesMG.Core.DbBone"/>
            <seealso cref="T:DragonBonesMG.Core.DbSlot"/>
            <seealso cref="T:DragonBonesMG.Animation.DbAnimation"/>
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbArmature.FrameRate">
            <summary>The framerate set in DragonBonesPro editor. Used to determine expected playback speed.</summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbArmature.RootBone">
            <summary>The root bone in this armatures bone hierarchy.</summary>
        </member>
        <member name="F:DragonBonesMG.Core.DbArmature.Animations">
            <summary>Collection of all animations for this armature.</summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbArmature.CurrentAnimation">
            <summary>The name of the active animation of this armature.</summary>
        </member>
        <member name="F:DragonBonesMG.Core.DbArmature.IkConstraints">
            <summary>
            A list of inverse kinematics constraints on this armature. (Not implemented yet) TODO
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbArmature.Position">
            <summary>
            Get the position of this armature as a Vector2.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbArmature.Rotation">
            <summary>
            Get the rotation of this armature. TODO get only the rotation around Z
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbArmature.Scale">
            <summary>
            Get the scale of this armature.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.ResetBones">
            <summary>
            Reset the bones of this armature to their original positions.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.GetBone(System.String)">
            <summary>
            Get the bone with the given name or null if it doesn't exist.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.AddBone(DragonBonesMG.Core.DbBone)">
            <summary>
            Add references to a bone and all its children bones/slots to this armatures 
            collections of bones and slots for quick lookups.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.GetSlot(System.String)">
            <summary>
            Get the slot with the given name or null if it doesn't exist.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.AddSlot(DragonBonesMG.Core.DbSlot)">
            <summary>
            Add a slot to this armature.
            </summary>
            <param name="slot"></param>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.SortSlots">
            <summary>
            Sort slots by zorder.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.Update(System.TimeSpan)">
            <summary>
            Update this armature. Elapsed time will be multiplied by <see cref="P:DragonBonesMG.Core.DbArmature.TimeScale"/>,
            <see cref="P:DragonBonesMG.Core.DbArmature.CurrentAnimation"/> will be updated and all bones and slots will be 
            updated to reflect the changes in the animation.
            <seealso cref="M:DragonBonesMG.Animation.DbAnimation.Update(System.TimeSpan)"/>
            </summary>
            <param name="elapsed">The time elapsed since the last call to update.</param>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Color})">
            <summary>
            Draw this armature with the given spritebatch and optionally position, rotation (in radians) and scale.
            </summary>
            <param name="s">A spritebatch</param>
            <param name="position">Position to draw at, Vector2.Zero when not passed.</param>
            <param name="rotation">Rotation of the armature in radians</param>
            <param name="scale">Scale of the armature along X and Y axis, Vector2.One when not passed</param>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Color)">
            <summary>
            Draw this armature using the given spritebatch and transforming it with the given matrix and color.
            </summary>
            <param name="s">A spritebatch</param>
            <param name="transform">The transformation matrix to apply</param>
            <param name="colorTransform">The color transformation to apply</param>
        </member>
        <member name="P:DragonBonesMG.Core.DbArmature.TimeScale">
            <summary>
            Time multiplier for animation playback. Can also be negative for reverse playback.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.PlayAnimation(System.Boolean)">
            <summary>
            Play the current animation if one is set.
            </summary>
            <param name="loop">If false the animation will stop after one full play, otherwise it will loop</param>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.PauseAnimation">
            <summary>
            Pause the current animation if it is set.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.GotoAndPlay(System.String,System.Boolean)">
            <summary>
            Set the current animation to the given one and play it.
            </summary>
            <param name="animation">The name of the animation to play</param>
            <param name="loop">If false the animation will stop after one full play, otherwise it will loop</param>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.GotoAndPlay(System.String,System.Single,System.Boolean)">
            <summary>
            Set the current animation to the given one and play it.
            </summary>
            <param name="animation">The name of the animation to play</param>
            <param name="time">The time in the animation to start playing at.</param>
            <param name="loop">If false the animation will stop after one full play, otherwise it will loop</param>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.GotoAndStop(System.String,System.Single)">
            <summary>
            Set the current animation to the given one and pause it at the given time.
            </summary>
            <param name="animation">The name of the animation to go to.</param>
            <param name="time">The time in the animation to set.</param>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.IsAnimating">
            <summary>True if an animation is loaded and it is playing, false otherwise</summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbArmature.IsDoneAnimating">
            <summary>
            True if no animation is loaded or <see cref="P:DragonBonesMG.Animation.DbAnimation.IsComplete"/> is true for the current animation.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbArmature.Texturer">
            <summary>
            Used to supply textures to all slots in this armature.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbArmature.Creator">
            <summary>
            Get the DragonBones instance that loaded this armature.
            </summary>
        </member>
        <member name="T:DragonBonesMG.Core.DbBone">
            <summary>
            Basic building block of skeletal animations. A bone can have slots that inherit transform from the bone.
            A bone's positions is determined by position of its parent in combination with its own positions. 
            Bones can be updated with a TransformTimelineState to be animated.
            <seealso cref="T:DragonBonesMG.Core.DbSlot"/>
            <seealso cref="T:DragonBonesMG.Animation.TransformTimelineState"/>
            </summary>
        </member>
        <member name="F:DragonBonesMG.Core.DbBone.Origin">
            <summary>
            Contains the original position of this bone relative to its parent.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbBone.CurrentGlobalTransform">
            <summary>
            Transform of this bone with tween calculated in.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbBone.Position">
            <summary>
            The global position of this bone.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbBone.Rotation">
            <summary>
            The global rotation of this bone.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbBone.Scale">
            <summary>
            The global scale of this bone.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbBone.Length">
            <summary>
            The length of this bone. This is exported by DragonBonesPro, but not used outside the editor for now.
            </summary>
        </member>
        <member name="F:DragonBonesMG.Core.DbBone.Bones">
            <summary>
            All direct children of this bone.
            </summary>
        </member>
        <member name="F:DragonBonesMG.Core.DbBone.Slots">
            <summary>
            All slots attached to this bone.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbBone.AddBone(DragonBonesMG.Core.DbBone)">
            <summary>
            Add the given bone to this bone as its child.
            Also adds the bone to this bones armature for fast lookups.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbBone.AddSlot(DragonBonesMG.Core.DbSlot)">
            <summary>
            Attach a slot to this bone.
            </summary>
        </member>
        <member name="T:DragonBonesMG.Core.DbTransform">
            <summary>
            Encapsulates a transformation matrix so we can make sure angular interpolation is done
            correctly (with <see cref="M:Microsoft.Xna.Framework.Quaternion.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)"/> rather than just linearly).
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbTransform.Interpolate(DragonBonesMG.Core.DbTransform,DragonBonesMG.Core.DbTransform,System.Single)">
            <summary>
            Interpolate between the two given DbTransforms with the given weight.
            </summary>
            <param name="t1">The first transform</param>
            <param name="t2">The second transform</param>
            <param name="weight">Value between 0 and 1</param>
            <returns>The interpolated DbTransform</returns>
        </member>
        <member name="T:DragonBonesMG.Core.DbSlot">
            <summary>
            Slots can be attached to a bone to inherit its transform. Add displays (<see cref="T:DragonBonesMG.Display.DbDisplay"/>)
            to a slot to have them rendered when a slot is drawn. 
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbSlot.DisplayIndex">
            <summary>
            Index of the active display of this slot in its list of displays, or -1 if no display is active.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbSlot.ZOrder">
            <summary>
            Determines the drawing order of slots within an armature.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbSlot.ColorTransform">
            <summary>
            The current color transform applied to a slot. This is used in 
            <see cref="M:Microsoft.Xna.Framework.Graphics.SpriteBatch.Draw(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Vector2},System.Single,System.Nullable{Microsoft.Xna.Framework.Vector2},System.Nullable{Microsoft.Xna.Framework.Color},Microsoft.Xna.Framework.Graphics.SpriteEffects,System.Single)"/>
            as the passed in color.
            </summary>
        </member>
        <member name="F:DragonBonesMG.Core.DbSlot.Displays">
            <summary>
            This list is up for grabs for easier editing, but be careful with the transforms.
            </summary>
        </member>
        <member name="P:DragonBonesMG.Core.DbSlot.Visible">
            <summary>
            True if DisplayIndex != -1, false otherwise.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbSlot.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Color)">
            <summary>
            Draw this slot's active display, if any, applying the current matrix and color transform.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Core.DbSlot.Update(DragonBonesMG.Animation.DisplayTimelineState,DragonBonesMG.Animation.FFDTimelineState)">
            <summary>
            Update this slot, applying the given states to find current matrix and color transforms
            and updating meshes using the FFDTimelineState if necessary.
            </summary>
            <param name="displayState"></param>
            <param name="ffdState"></param>
        </member>
        <member name="M:DragonBonesMG.Core.DbSlot.SetNewDisplay(DragonBonesMG.Display.DbDisplay,Microsoft.Xna.Framework.Matrix)">
            <summary>
            Add the display to the list of displays and set it to be the active display.
            </summary>
            <param name="display">The display to add and show.</param>
            <param name="transform">The transform of the display.</param>
        </member>
        <member name="M:DragonBonesMG.Core.DbSlot.SetNewDisplay(DragonBonesMG.Display.DbDisplay)">
            <summary>
            Add the display to the list of displays and set it to be the active display.
            Uses the Identity matrix as transfomr for the display.
            </summary>
            <param name="display">The display to add and show.</param>
        </member>
        <member name="M:DragonBonesMG.Core.DbSlot.SetDisplay(System.String)">
            <summary>
            Set the display of this slot to the one with the given name, or nothing if no display with the given name is present.
            </summary>
            <param name="name">The name of the display to set the active display to.</param>
        </member>
        <member name="T:DragonBonesMG.Core.DbSlot.DisplayTransform">
            <summary>
            Wraps a display with its current transform so a display can be reused and have a different transform
            in another slot.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Display.ITextureSupplier.Get(System.String)">
            <summary>
            Get a drawable that will draw the given texture when drawn.
            Returns null if the given texture does not exist.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Display.TexturePart.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch)">
            <summary>
            Assumes SpriteBatch.Begin() has been called.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Display.TextureAtlas.Get(System.String)">
            <summary>
            Get a drawable that will draw the given texture when drawn.
            Returns null if the given texture does not exist.
            </summary>
        </member>
        <member name="M:DragonBonesMG.Display.TextureAtlas.FromJson(System.String)">
            <summary>
            Parse the json file at the given path and return the resulting TextureAtlas.
            Don't forget to load the texture using <see cref="M:DragonBonesMG.Display.TextureAtlas.LoadContent(Microsoft.Xna.Framework.Content.ContentManager)"/>.
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:DragonBonesMG.Display.DbMesh.Update(DragonBonesMG.Animation.MeshTimeline)">
            <summary>
            Update this mesh.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:DragonBonesMG.Display.DbMesh.Draw(Microsoft.Xna.Framework.Graphics.SpriteBatch,Microsoft.Xna.Framework.Matrix,Microsoft.Xna.Framework.Color)">
            <summary>
            Draw this mesh.
            </summary>
            <param name="s">A spritebatch.</param>
            <param name="transform"> A transformation matrix.</param>
            <param name="colorTransform">A color</param>
        </member>
        <member name="T:DragonBonesMG.DragonBones">
            <summary>
            Use this class to load a DragonBones file. It contains some general data exported by DragonBones
            and more importantly the armatures loaded with the file. Use <see cref="P:DragonBonesMG.DragonBones.Armature"/> to get the
            first loaded armature if you're not using nested armatures. You can also get Armatures by name using
            <see cref="M:DragonBonesMG.DragonBones.GetArmature(System.String)"/>.
            <seealso cref="T:DragonBonesMG.Core.DbArmature"/>
            </summary>
        </member>
        <member name="F:DragonBonesMG.DragonBones.Name">
            <summary>The name of this DragonBones instance.</summary>
        </member>
        <member name="F:DragonBonesMG.DragonBones.Version">
            <summary>The version of DragonBones this instance was created with.</summary>
        </member>
        <member name="F:DragonBonesMG.DragonBones.IsGlobal">
            <summary>
            True if all transform are global as opposed to being relative to their parent. 
            </summary>
            <remarks>
            This is always false in newer versions of DragonBones and this runtime does not support
            older versions with global positions.
            </remarks>
        </member>
        <member name="F:DragonBonesMG.DragonBones.FrameRate">
            <summary>The framerate set in DragonBonesPro editor. Used to determine expected playback speed.</summary>
        </member>
        <member name="F:DragonBonesMG.DragonBones._armatures">
            <summary>List of armatures loaded by this DragonBones instance.</summary>
        </member>
        <member name="P:DragonBonesMG.DragonBones.Armature">
            <summary>
            Get the first loaded armature from this DragonBones instance or null if none is present.
            </summary>
            <remarks>Pretty convenient for a DB instance with just one armature, which is often the case.</remarks>
        </member>
        <member name="M:DragonBonesMG.DragonBones.GetArmature(System.String)">
            <summary>
            Get an armature that was loaded by this DragonBones instance by its name.
            </summary>
            <param name="name">The name of the armature</param>
            <returns>A DbArmature with <see cref="P:DragonBonesMG.Display.DbDisplay.Name"/>name or null if no armature with
            the given name is loaded</returns>
        </member>
        <member name="M:DragonBonesMG.DragonBones.FromJson(System.String,DragonBonesMG.Display.ITextureSupplier,Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Load a DragonBones instance from the JSON file at the given path.
            </summary>
            <param name="path">Relative or absolute path to the json DragonBones file.</param>
            <param name="texturer">The supplier that has all textures for the DragonBones file at the given path.</param>
            <param name="graphics">A GraphicsDevice used to initialize meshes for FFD if necessary.</param>
            <returns></returns>
        </member>
        <member name="M:DragonBonesMG.JsonData.ColorData.ToColor">
            <summary>
            Note: premultiplied alpha!
            </summary>
        </member>
        <member name="M:DragonBonesMG.JsonData.ColorData.op_Implicit(DragonBonesMG.JsonData.ColorData)~Microsoft.Xna.Framework.Color">
            <summary>
            Note: premultiplied alpha!
            </summary>
        </member>
    </members>
</doc>
